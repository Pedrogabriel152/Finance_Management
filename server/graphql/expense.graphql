"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Expense {
    id: ID!
    description: String
    merchandise_purchased: String!
    establishment: String!
    installments: Int!
    value_installment: Float!
    expires: String!
    installments_paid: Int!
    paid_expense: Boolean!
    months_paid: String!
    user_id: Int!
    created_at: DateTime
    updated_at: DateTime
} 
 
input ExpenseInput{
    description: String
    merchandise_purchased: String!
    establishment: String!
    installments: Int!
    value_installment: Float!
    expires: String!
    installments_paid: Int!
    paid_expense: Boolean
    user_id: Int!
}

interface MessageExpense{
    code: Int!
    message: String! 
}

type MessageResponseExpense implements MessageExpense{
    code: Int!
    message: String!
    expense: Expense
}

type TotalExpenses{
    totalExpenses: Int!
    total: Float!
}

type TotalExpensesMonth{
    month: String!
    total: Float!
}

extend type Query @guard{
    expense(id: ID!, user_id: ID!): MessageResponseExpense! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getExpense")
    expenses(user_id:ID!): [Expense]! @paginate(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getExpenses")
    expensesClose(user_id:ID!): [Expense]! @paginate(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getExpensesClose")
    expensesOpen(user_id:ID!): [Expense]! @paginate(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getExpensesOpen")
    totalExpenses(user_id: ID!): TotalExpenses! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getTotalExpenses")
    getFiveExpense(user_id: ID!): [Expense]! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getFiveExpenses")
    searchExpensesMonth(user_id: ID!): [TotalExpensesMonth]! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getExpensesMonth")
    getActiveExpense(user_id: ID!): [Expense]! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getActiveExpenses")
    getIdleExpense(user_id: ID!): [Expense]! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getIdleExpenses")
    getAllExpense(user_id: ID!): [Expense]! @field(resolver: "App\\GraphQL\\Queries\\ExpenseQuery@getAllExpenses")
}

extend type Mutation @guard{
    createExpense(expense: ExpenseInput!): MessageResponseExpense! @field(resolver: "App\\GraphQL\\Mutations\\ExpenseMutation@createExpense")
    payInstallmentExpense(id: ID!, user_id: ID!): MessageResponseExpense! @field(resolver: "App\\GraphQL\\Mutations\\ExpenseMutation@payInstallment")
    editExpense(id:ID!, user_id: ID!, expense: ExpenseInput!): MessageResponseExpense! @field(resolver: "App\\GraphQL\\Mutations\\ExpenseMutation@editExpense")
}