"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Job{
    id: ID!
    description: String
    wage: Float!
    establishment: String!
    user_id: Int!
    active: Boolean!
    leave: String
    started: String!
    created_at: DateTime
    updated_at: DateTime
}

input JobInput{
    description: String
    wage: Float!
    establishment: String!
    user_id: Int!
    started: String!
    leave: String
}

interface MessageJob{
    code: Int!
    message: String! 
}

type MessageResponseJob implements MessageJob{
    code: Int!
    message: String!
    job: Job
}

extend type Mutation @guard{
    createJob(job: JobInput): MessageResponseJob! @field(resolver: "App\\GraphQL\\Mutations\\JobMutation@createJob")
    updateJob(id: ID!, user_id: ID!, job: JobInput!): MessageResponseJob! @field(resolver: "App\\GraphQL\\Mutations\\JobMutation@updateJob")
    deleteJob(id: ID!, user_id: ID!): MessageResponseJob! @field(resolver: "App\\GraphQL\\Mutations\\JobMutation@deleteJob")
}

extend type Query @guard{
    jobs(user_id: ID!): [Job]! @paginate(resolver: "App\\GraphQL\\Queries\\JobQuery@getJobs")
    job(id: ID!, user_id: ID!): Job! @field(resolver: "App\\GraphQL\\Queries\\JobQuery@getJob")
    fiveJobs(user_id: ID!): [Job]! @field(resolver: "App\\GraphQL\\Queries\\JobQuery@getFiveJobs")
    getActiveJobs(user_id: ID!): [Job]! @paginate(resolver: "App\\GraphQL\\Queries\\JobQuery@getActiveJobs")
    getIdleJobs(user_id: ID!): [Job]! @paginate(resolver: "App\\GraphQL\\Queries\\JobQuery@getIdleJobs")
}